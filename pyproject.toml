[build-system]
# Minimum requirements for the build system to execute.
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

# [tool.setuptools.package-data]
# example_pkg = ["*.json"]

[project]
name = "machine-learning"
authors = [{ name = "Ranit Raj Ganguly", email = "ranitrajganguly@gmail.com" }]
description = "Simple coding problems related to basic ML concepts."
readme = "README.md"
requires-python = ">=3.10"
keywords = ["Machine Learning", "Neural Networks", "Gradient Descent"]
classifiers = ["Programming Language :: Python :: 3"]
dependencies = ["numpy", 'importlib-metadata; python_version<"3.8"']
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
release = ["build", "twine"]
static-code-qa = ["pre-commit"]

# docs: https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html#dynamic-metadata
[tool.setuptools.dynamic]
version = { file = "version.txt" }

[tool.setuptools]
license-files = ["LICENSE.txt"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]

[tool.black]
exclude = 'build/|buck-out/|dist/|_build/|\.git/|\.hg/|\.mypy_cache/|\.tox/|\.venv/'
line-length = 119

[tool.flake8]
docstring-convention = "all"
ignore = [
    "D107",
    "D212",
    "E501",
    "W503",
    "W605",
    "D203",
    "D100",
    "D103",
    "D104",
]
exclude = ["venv"]
max-line-length = 119

# radon
radon-max-cc = 10

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
ignore_missing_imports = true

[tool.isort]
profile = "black"
multi_line_output = "VERTICAL_HANGING_INDENT"
force_grid_wrap = 2
line_length = 119

[tool.pylint."messages control"]
disable = [
    "line-too-long",
    "trailing-whitespace",
    "missing-function-docstring",
    "consider-using-f-string",
    "import-error",
    "too-few-public-methods",
    "redefined-outer-name",
    "broad-exception-caught",
    "no-name-in-module",
    "no-member",
    "unnecessary-pass",
    "expression-not-assigned",
    "pointless-statement",
    "fixme",
    "no-self-argument",
]

[tool.ruff]
# Enable flake8-bugbear (`B`) rules.
select = ["E", "F", "B", "ERA"]

# Never enforce `E501` (line length violations).
ignore = ["E501", "F401", "ERA001"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]
line-length = 119

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]
"path/to/file.py" = ["E402"]
